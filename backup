import { isNode } from "./src/utils/crossPlatform.js";

export default class FileConverter {

    constructor(private original: File) { 
        if(isNode())
        throw new Error('FileConvertor is available only in the browser')
    }

    /**
     * Convert a File object to an image. Optionally supply a config object with maxSize, refering to the maximal height or width(depending on the proportions).
     */
    async toImage(config?:{maxSize:number}) {
        let file!:File;
        if(config?.maxSize){
            file= await this.getBlobWithModifiedSize({maxSize:config.maxSize}) as File
        }else{
            file = this.original
        }
        const image = new Image()

        image.src = URL.createObjectURL(file)

        return image;

    }

    async getBlobWithModifiedSize({maxSize}:{maxSize:number}): Promise<Blob | null> {
        const file = this.original;
        if (!file.type.match(/image.*/)){
            throw new Error('File supplied is not an image')
        }

        const image = new Image();

        image.src = URL.createObjectURL(file);

        await new Promise<Event>((res) => image.onload = res);

        const canvas = document.createElement("canvas");

        let width = image.width
        let height = image.height;
        if (width > height) {
            if (width > maxSize) {
                height *= maxSize / width;
                width = maxSize;
            }
        } else {
            if (height > maxSize) {
                width *= maxSize / height;
                height = maxSize;
            }
        }
        canvas.width = width;
        canvas.height = height;
        canvas.getContext('2d')!.drawImage(image, 0, 0, width, height);

        return new Promise((res) => canvas.toBlob(res));

    }


}